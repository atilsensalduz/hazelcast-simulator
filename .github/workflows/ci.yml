name: CI - Build, Test, and Push Docker Image

on:
  push:
    branches: master
    tags: 'v*'
  pull_request:
    branches: master

env:
  IMAGE_NAME: hazelcast/simulator

jobs:
  docker-ci:
    name: Docker Build, Test, and Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Setup Java
        uses: actions/setup-java@v4.7.1
        env:
          HZ_SNAPSHOT_INTERNAL_USERNAME: ${{ secrets.HZ_SNAPSHOT_INTERNAL_USERNAME }}
          HZ_SNAPSHOT_INTERNAL_PASSWORD: ${{ secrets.HZ_SNAPSHOT_INTERNAL_PASSWORD }}

        with:
          java-version: '17'
          distribution: 'termurin'
          cache: 'maven'
          server-id: snapshot-internal
          server-username: HZ_SNAPSHOT_INTERNAL_USERNAME
          server-password: HZ_SNAPSHOT_INTERNAL_PASSWORD
          
      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.11'

      - name: Build Java artifacts (required for Docker build)
        run: |
          echo "Building Java components..."
          ./build
        timeout-minutes: 15

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5.4.0
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run container smoke tests
        run: |
          echo "Running container smoke tests..."
          
          # Test container startup and basic functionality
          echo "Testing container startup..."
          CONTAINER_ID=$(docker run -d test-image:latest sleep 30)
          
          # Wait for container to be ready
          sleep 5
          
          # Test basic commands are available
          echo "Testing Java installation..."
          docker exec "${CONTAINER_ID}" java -version
          
          echo "Testing Maven installation..."
          docker exec $CONTAINER_ID mvn --version
          
          echo "Testing Python installation..."
          docker exec $CONTAINER_ID python3.11 --version
          
          echo "Testing Terraform installation..."
          docker exec $CONTAINER_ID terraform version
          
          echo "Testing AWS CLI installation..."
          docker exec $CONTAINER_ID aws --version
          
          echo "Testing simulator commands availability..."
          docker exec $CONTAINER_ID which perftest
          docker exec $CONTAINER_ID which inventory
          
          echo "Testing simulator welcome message..."
          docker exec $CONTAINER_ID /opt/simulator/bin/simulator-welcome
          
          echo "Testing perftest help command..."
          docker exec $CONTAINER_ID perftest --help || true
          
          echo "Testing inventory help command..."
          docker exec $CONTAINER_ID inventory --help || true
          
          # Clean up
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID
          
          echo "Smoke tests completed successfully!"

      - name: Run security scan with Trivy
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: test-image:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3.30.6
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Run Trivy vulnerability scanner (table output)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: test-image:latest
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail on vulnerabilities for now

      - name: Build and push multi-platform Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5.4.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Java Build**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Smoke Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: Completed (check Security tab for details)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "### Published Images" >> $GITHUB_STEP_SUMMARY
            echo "The following images have been published:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Usage" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "# Pull and run the latest image" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it --rm ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
